React:
1) confirguracion en vs
	stttings: escribo format on save y selecciono:
	texto: format a file on save. A f...

  settings2: formatter
  texto: define a deffault fomrmatter.. y selecciono prettier

    //extensiones

  -Autorename tag: para que al inicio y al final cambei la etiqueta
  -ES7+ React/Redux/React-Native snippets: para poder que autocomplete el export default 
  

  n: si voy a la terminal me voy a enonctrar corriendo el archivo:
  3:35:39 p. m. [vite] hmr update /src/Titulo.tsx 
  hmr=hot module reload (esto vite lo que hace es que detecta si hay un cambio en el dom y actualiza)

  n: las funciones tienen la convencion PascalCase o UpperCamelCase 
  siempre las funciones seran en Maysuscula si son un componente

  n: si queiro seleccionar avarios textos iguales presiono CTRL+ d y va colocando un cursor al final de cada palabra

2)actualmente deberia utilizar Vite
  2.1) REACT Se encarga de ver que elemnto cambio en el DOM y le avisa  AL ReactDOM para que el renderice el el elemento root dicha infomracion
3) creando proyecto:
	c: npm create vite@5.2.3
	c: cd react-app
	c: npm install
	c: npm run dev
4) me dirijo a 
	u: react-app\src\App.tsx
	s:
    //Esto es codigo JSX que sera transformado atravez de react. createElement( creando esto al Html en el server)
    // si voy a Babel.js en "Babel es un "compilador" (o transpilador) para JavaScript. "
		function App() {
      return <h1>Hola mundo</h1>;
    }
    export default App;
5) para pasarle variables:
  s:
    function App() {
      return <h1>Hola {variable va en llaves o "Curly brackets"}</h1>;
    }
    export default App;
6) llamando un componente:
  n: creo un componente:
  u: react-app\src\Titulo.tsx
  s: 
      function Titulo() {
        const nombre = 'kenneth';
        if (nombre) {
          return <h1>hola {nombre}</h1>;
        }
        return <h1>Hola mundo</h1>;
      }
      export default Titulo;
  6.1) lo importo en la aplicacion principal
    u: react-app\src\App.tsx
    s:
      import Titulo from './Titulo';
      function App() {
        return <Titulo />;   //--------Agregado Asi es como se utiliza
      }
      export default App;
7) instalacion de bootstrap:
  c: npm i bootstrap@5.3.3

  n: elimino toda la informacion de estilos:
  u: react-app\src\App.css
  U: react-app\src\index.css

  7.1) a√±adiendo bootstrap
    u:react-app\src\main.tsx
    s:
      import 'bootstrap/dist/css/bootstrap.min.css';


  7.2) estilos en linea, pero no se es tan buena practica asi:
   se pasan dentro de un {} ya que asi se evalua una variable dentro y 
   la variable es un objeto que entonces sera {elementos del objeto:dato}

    s: <div className="card" style={{ width: '440px' }}>

    7.2.2) forma2:
      s:  
      const width = { width: '440px' };
        return (
          <div className="card" style={width}>
8) creando componentes y reutilizando:
  u:react-app\src\components\Card.tsx
  s:
      function Card() {
        const width = { width: '440px' };
        return (
          <div className="card" style={width}>
            <div className="card-body">
              <CardBody />  //----------auqi se llama al componete 
            </div>
          </div>
        );
      }
      export function CardBody() { //se creo otro componete dentro del mismo archivo se puede asi o como quiera
        return (
          <>-------//tambien se podria usar fragement de reactesto sirve para no crear un div dentro de otro div ,
          //-------- esto simplemente hace que una lo que est adentro pero no va crear este componete ya que si se usa div si crearia el compnente div
            <h5 className="card-title">Card title</h5>
            <p className="card-text">
              Some quick example text to build on the card title and make up the bulk of the card's
              content.
            </p>
            <a href="#" className="btn btn-primary">
              Go somewhere
            </a>
          </>
        );
      }
      export default Card;

9) pasandole las propiedades a un componente:
  u: react-app\src\App.tsx
  s:
    import Card from './components/Card';
    function App() {
      return (
        <div>
           <Card body={'mensaje dese el App.tsx'} />;  //----aqui sepasa la info
        </div>
      );
    }
    export default App;
  

  9.1) me voy al componente qie le paso:
    u: react-app\src\components\Card.tsx
    s:
      function Card(props) {
        const { body } = props; // se sugiere usar destructuring
        const width = { width: '440px' };
        return (
          <div className="card" style={width}>
            <div className="card-body">{body}</div>  //----aqui se utiliza
          </div>
        );
    }

    n: ahor apara evitar errores de tipescript se debe colocar el typo
    s:
      // interface CardProps { //asegurarse que el nombre 
      // de la Interface tenga el Nombre del componente + Props
      // o simplemente Props
      interface Props {
        body: string;
      }

      function Card(props: Props) {
        const { body } = props; // se sugiere usar destructuring
        const width = { width: '440px' };
        return (
          <div className="card" style={width}>
            <div className="card-body">{body}</div>
          </div>
        );
      }

10) si quiero varias propiedades:
  u:react-app\src\components\Card.tsx
  n: el signo ? (question mark), en una interfaz hace que esta no sea obligatoria pasarsele 
  s:
    interface CardBodyProps {
      title: string;
      text?: string;
    }

    export function CardBody(props: CardBodyProps) {
      const { title, text } = props;
      return (
        <>
          <h5 className="card-title">{title}</h5>
          <p className="card-text">{text}</p>
        </>
      );
    }
  10.1) pasandole a CardBodyProps las propiedades:
    u:  react-app\src\App.tsx
    s:
      import CardBody from './components/Card';

      function App() {
        return (
          <div>
            <CardBody title={'titulo'} text="mi texto es " />;
          </div>
        );
      }
      export default App;

11) pasandole propiedad children a el componente hijo:
  u: react-app\src\App.tsx
  s: Card>mandndo propiedad desde children</Card>

  u: react-app\src\components\Card.tsx
  n: ojo la palabra "children" ya viene definida como propiedad propia de react 
  entonces no se puede usar esa palabra como un ombre de una propiedad
  s: interface Props {
      children: string; //nombre incambiable 
      body?: string;
    }

    function Card(props: Props) {
      const { body, children } = props; // se sugiere usar destructuring
      return (
          <div className="card-body">{children}</div>
      )
  11.1) pasandole Un componente a otro componente por medio del children

      U:react-app\src\App.tsx
      s:
      <Card>
        <CardBody title={'titulo'} text="mi texto es " />
      </Card>

      n: sin emabrgo me mandra este error: 
      This JSX tag's 'children' prop expects type 'string'
       which requires multiple children, but only a single 
       child was provided.

    11.1.2) entonces para evitar el error debo buscar una propiedad
    pra la interfaz:
      u: react-app\src\components\Card.tsx
      s:
        interface Props {
          children: React.ReactNode; //-----Agregadoforma1
          body?: string;
        }

        function Card(props: Props) {
          const { body, children } = props; // se sugiere usar destructuring
          return (
              <div className="card-body">{children}</div>
          );
        }

      s: forma2:
        import { ReactNode } from "react";  //
        interface Props {
          children: ReactNode;
          body?: string;
        }

12) creando un componente de lista:
  n: creo el componente lista
  U: react-app\src\components\List.tsx
  s:
      type Props = {
        data: string[]; //---esto sera un arreglo de string
      };

      function List({ data }: Props) {
        return (
          <div>
            <ul className="list-group">
              {data.map((item, index) => (
                <li key={index} className="list-group-item">
                  {item}
                </li>
              ))}
            </ul>
          </div>
        );
      }

      export default List;
  12.2) para el ejemplo solo le pasara la key el mismo elemento
      <ul className="list-group">
        {data.map((elemento) => (
          <li key={elemento} className="list-group-item">
            {elemento}
          </li>
        ))}
      </ul>

  12.3) ahora hago el llamado de ese comoponente
    u: react-app\src\App.tsx
    s: 
      function App() {
        const list = ['Goku', 'vegeta', ];
        return (
            <List data={list} />
        )
      }
13) Eventos
  u:
  s:
     <li
            onClick={() => console.log('evento', elemento)}
            key={elemento}
            className="list-group-item"
            value={elemento}
          >
            {elemento}
          </li>
  13.1) convenciones de Eventos
     import { MouseEvent } from 'react';  //---agregado es usado para el evento

      type Props = {
        data: string[];
      };

      function List({ data }: Props) {

        //---------------------convencion 

        const handleClick = (e: MouseEvent) => {
          console.log('evento', e);
        };
        return (
          <div>
            <ul className="list-group">
              {data.map((elemento) => (
                //------------el handleclick aqui toma el evento 
                <li onClick={handleClick} key={elemento} className="list-group-item" value={elemento}>
                  {elemento}
                </li>
              ))}
            </ul>
          </div>
        );
      }
    13.2) si le quiero pasar informacion diferente al evento
      s:
        const handleClick = (e: string) => {
        console.log('evento', e);
        };
          return (
            <div>
              <ul className="list-group">
                {data.map((elemento) => (
              <li onClick={()=>handleClick(elemento)} //----le paso el elemento aqui hago la arrow function 
                )))
14) estados
  n: react por si solo no conoce las variables por lo tanto 
  si no las conoce si se hace un cambio en alguna variable
  que se este usando en alguna parte del html, entonces 
  no se va a reflejar en el front
  ejem:

  function List({ data }: Props) {
    let index = 4;  //-----------variable
    const handleClick = (e: number) => {
      index = e; //---------funcion que cambia el valor de la varible
      console.lo('evento', index);
    };
   return (
        <div>
          <ul className="list-group">
            {data.map((elemento, i) => (
              <li
                onClick={() => handleClick(i)} //-----üí•evento que hace llamado a funcion que cambai vaeriable
                key={elemento}

                //-------üí•Uso de la variable "index", para poner o no el active
                className={`list-group-item ${i === index ? 'active' : ''}`}

                value={elemento}
              > {elemento} </li>
            ))}
          </ul>
        </div>
      );
    }

    n: como se puede observar se usa el index en el atributo "className" 
    sin embargo esto no refleja ningun cambio en el servidor, ya que 
    react Se encarga de ver que elemnto cambio en el DOM y avisarle al ReactDOM
    pero entonces react no puede con solo la funcion handleClick
    reconocer si esa variable cambio, por lo tanto debe de usar una
    funcionalidad que permita reconocer que esa variable cambio 

  14.1) Uso del useState

    u:react-app\src\components\List.tsx
    s:
    
      function List({ data }: Props) {
        //index es la variable, setIndex es la funcion que modifica la variable
        const [index, setIndex] = useState(-10);//----- üí• Uso del useState
        const handleClick = (e: number) => {
          setIndex(e); //----------üí•Uso de la funcion que cambia el valor 
                                    de la variable, y que es a su vez detectable por react
        };
        return (
          <div>
            <ul className="list-group">
              {data.map((elemento, i) => (
                <li
                  onClick={() => handleClick(i)}
                  key={elemento}
                  className={`list-group-item ${i === index ? 'active' : ''}`}
                  value={elemento}
                >
                  {elemento}
                </li>
              ))}
            </ul>
          </div>
        );
      }
15) pasando funciones como propiedades
  U:react-app\src\components\List.tsx
  s:
    type Props = {
      data: string[];
      onSelect?: (elemento: string) => void;  //----funcion definida en esta interfaz, "?:" para que sea opcional
    };

    function List({ data, onSelect }: Props) {//------Recibe la funcion como propiedad
      const [index, setIndex] = useState(1);
      const handleClick = (e: number, elemento: string) => { //------recibe el elemento
        setIndex(e);
            onSelect?.(elemento); //------Uso de la funcion y le pongo "?." para que no me de error si no se le pasa la funcion
      };
      return (
        <div>
          <ul className="list-group">
            {data.map((elemento, i) => (
              <li
                onClick={() => handleClick(i, elemento)} //------ahora le paso el elemento solo para el ejemplo
                key={elemento}
                className={`list-group-item ${i === index ? 'active' : ''}`}
                value={elemento}
              >
                {elemento}
            )))
  15.2) ahora si pongo en la funcion definida
    u: react-app\src\App.tsx
    s:
    function App() {
      const list = ['Goku', 'vegeta', 'krilim', 'gohan', 'picoro'];

      const handleSelect = (elemento: string) => {  //----creo la funicon 
        console.log('Imprimiendo', elemento);
      };
      return (
        <div>
          <CardBody title={'titulo'} text="mi texto es " />;{/* <Card body="Hola soy body" /> */}
          <Card>
            <CardBody title={'titulo'} text="mi texto es " />
            <List data={list} onSelect={handleSelect} /> //----Le paso la funcion 
          </Card>
        </div>
      );
    }
          





      

node:
-Exportar formas
  1- export function CardBody(props: CardBodyProps) {
    importa: import v{ CardBody } from './components/Card';
  2-export default Card;
    importa: import Card from './components/Card';
  3; importando varias: import Card, { CardBody } from './components/Card';

-teclados:
  * CTRL+ d: si queiro seleccionar avarios textos iguales presiono CTRL+ d y va colocando un cursor al final de cada palabra
  * CTRL+ spacio: me muestra opciones
  * ctrl+alt+r : permite sacar las opciones de snippets (abreviatura pra crear codigo de react)

-snipepts:
  * tsrfce: creates a react copotnent

-interface: contiene el nombre y el tipo de las propiedades que se le pasan a una funcion o las variables para saber que tipo son
            las interfaces se pueden definir:
            forma1:   
              type Props = {};
            forma2:
              interface Props = {};   
-Eventos:
  -onClick: este es el mismo onclick de Html
    <li
            onClick={() => console.log('evento', elemento)}
            key={elemento}
            className="list-group-item"
            value={elemento}
          >
-como saber el typo si no lo se por ejemplo:
  s: onClick={(e) => handleClick()}
  n: si me posisiono sobre el "e" me va mostrar 
  "(parameter) e: React.MouseEvent<HTMLLIElement, MouseEvent>"
  asi ya se que es de typo React.MouseEvent

-react uso de varialbles en atributos Html
  1- uso de llaves o "Curly brackets"
   className={`list-group-item ${elemento === '1' ? 'active' : ''}`}

-simbolos usados:
  funcionVariableOalgo.?  : EL ".?" es para que si no esta definida no la ejecuta sino si 

-convenciones:
  el componente que recibe una funcion usa el nombre onSelect()
  el componente que manda la funcion nombra a su funcion "handleSelect":
  <List data={list} onSelect={handleSelect} />

-react conceptos:
  -state: los estados pueden mutar 
  -props: son inmutables

  -truthy y falsy
    falsy: false, o , '', undefined, null
    {123 && 'numeros '} //como si hay algo en la izquierda (true) de && se imprime lo de la derecha
      {'hay string' && ' string texto'} //como si hay algo en la izquierda (true) de && se imprime lo de la
      derecha
      {undefined && 'sundefined'} //como esta indefinido no imprime nada
      {null && 'null'} //como esta null no imprime nada
      {false && 'false'} //como esta false no imprime nada
      {'' && 'string vacio'} //como esta VACIO no imprime nada
      {0 && 'soy cero '} // el cero es un problema ya que en esta ocasion imprime el cero
      // por eso si no quiero que aparezca un cero debo evaluar la respuesta con un true o flase:
        {list2.length && 'soy lista vacia'} //esto imprimiria cero "o"
        n: pero como lo que queiro es que si es cero no imprima nada:
        tengo que evaluar que no sea cero 
        {list2.length !== 0 && 'si hay algo en la lista'}

