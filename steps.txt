React:
1) confirguracion en vs
	stttings: escribo format on save y selecciono:
	texto: format a file on save. A f...

  settings2: formatter
  texto: define a deffault fomrmatter.. y selecciono prettier

  Autorename tag extension: intalar 

  n: si voy a la terminal me voy a enonctrar corriendo el archivo:
  3:35:39 p. m. [vite] hmr update /src/Titulo.tsx 
  hmr=hot module reload (esto vite lo que hace es que detecta si hay un cambio en el dom y actualiza)

  n: las funciones tienen la convencion PascalCase o UpperCamelCase 
  siempre las funciones seran en Maysuscula si son un componente

  n: si queiro seleccionar avarios textos iguales presiono CTRL+ d y va colocando un cursor al final de cada palabra

2)actualmente deberia utilizar Vite
  2.1) REACT Se encarga de ver que elemnto cambio en el DOM y le avisa  AL ReactDOM para que el renderice el el elemento root dicha infomracion
3) creando proyecto:
	c: npm create vite@5.2.3
	c: cd react-app
	c: npm install
	c: npm run dev
4) me dirijo a 
	u: react-app\src\App.tsx
	s:
    //Esto es codigo JSX que sera transformado atravez de react. createElement( creando esto al Html en el server)
    // si voy a Babel.js en "Babel es un "compilador" (o transpilador) para JavaScript. "
		function App() {
      return <h1>Hola mundo</h1>;
    }
    export default App;
5) para pasarle variables:
  s:
    function App() {
      return <h1>Hola {variable va en llaves o "Curly brackets"}</h1>;
    }
    export default App;
6) llamando un componente:
  n: creo un componente:
  u: react-app\src\Titulo.tsx
  s: 
      function Titulo() {
        const nombre = 'kenneth';
        if (nombre) {
          return <h1>hola {nombre}</h1>;
        }
        return <h1>Hola mundo</h1>;
      }
      export default Titulo;
  6.1) lo importo en la aplicacion principal
    u: react-app\src\App.tsx
    s:
      import Titulo from './Titulo';
      function App() {
        return <Titulo />;   //--------Agregado Asi es como se utiliza
      }
      export default App;
7) instalacion de bootstrap:
  c: npm i bootstrap@5.3.3

  n: elimino toda la informacion de estilos:
  u: react-app\src\App.css
  U: react-app\src\index.css

  7.1) a√±adiendo bootstrap
    u:react-app\src\main.tsx
    s:
      import 'bootstrap/dist/css/bootstrap.min.css';


  7.2) estilos en linea, pero no se es tan buena practica asi:
   se pasan dentro de un {} ya que asi se evalua una variable dentro y 
   la variable es un objeto que entonces sera {elementos del objeto:dato}

    s: <div className="card" style={{ width: '440px' }}>

    7.2.2) forma2:
      s:  
      const width = { width: '440px' };
        return (
          <div className="card" style={width}>
8) creando componentes y reutilizando:
  u:react-app\src\components\Card.tsx
  s:
      function Card() {
        const width = { width: '440px' };
        return (
          <div className="card" style={width}>
            <div className="card-body">
              <CardBody />  //----------auqi se llama al componete 
            </div>
          </div>
        );
      }
      export function CardBody() { //se creo otro componete dentro del mismo archivo se puede asi o como quiera
        return (
          <>-------//tambien se podria usar fragement de reactesto sirve para no crear un div dentro de otro div ,
          //-------- esto simplemente hace que una lo que est adentro pero no va crear este componete ya que si se usa div si crearia el compnente div
            <h5 className="card-title">Card title</h5>
            <p className="card-text">
              Some quick example text to build on the card title and make up the bulk of the card's
              content.
            </p>
            <a href="#" className="btn btn-primary">
              Go somewhere
            </a>
          </>
        );
      }
      export default Card;

9) pasandole las propiedades a un componente:
  u: react-app\src\App.tsx
  s:
    import Card from './components/Card';
    function App() {
      return (
        <div>
           <Card body={'mensaje dese el App.tsx'} />;  //----aqui sepasa la info
        </div>
      );
    }
    export default App;
  

  9.1) me voy al componente qie le paso:
    u: react-app\src\components\Card.tsx
    s:
      function Card(props) {
        const { body } = props; // se sugiere usar destructuring
        const width = { width: '440px' };
        return (
          <div className="card" style={width}>
            <div className="card-body">{body}</div>  //----aqui se utiliza
          </div>
        );
    }

    n: ahor apara evitar errores de tipescript se debe colocar el typo
    s:
      // interface CardProps { //asegurarse que el nombre 
      // de la Interface tenga el Nombre del componente + Props
      // o simplemente Props
      interface Props {
        body: string;
      }

      function Card(props: Props) {
        const { body } = props; // se sugiere usar destructuring
        const width = { width: '440px' };
        return (
          <div className="card" style={width}>
            <div className="card-body">{body}</div>
          </div>
        );
      }




