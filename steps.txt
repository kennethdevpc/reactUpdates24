React:
1) confirguracion en vs
	stttings: escribo format on save y selecciono:
	texto: format a file on save. A f...

  settings2: formatter
  texto: define a deffault fomrmatter.. y selecciono prettier

    //extensiones

  -Autorename tag: para que al inicio y al final cambei la etiqueta
  -ES7+ React/Redux/React-Native snippets: para poder que autocomplete el export default 
  

  n: si voy a la terminal me voy a enonctrar corriendo el archivo:
  3:35:39 p. m. [vite] hmr update /src/Titulo.tsx 
  hmr=hot module reload (esto vite lo que hace es que detecta si hay un cambio en el dom y actualiza)

  n: las funciones tienen la convencion PascalCase o UpperCamelCase 
  siempre las funciones seran en Maysuscula si son un componente

  n: si queiro seleccionar avarios textos iguales presiono CTRL+ d y va colocando un cursor al final de cada palabra

2)actualmente deberia utilizar Vite
  2.1) REACT Se encarga de ver que elemnto cambio en el DOM y le avisa  AL ReactDOM para que el renderice el el elemento root dicha infomracion
3) creando proyecto:
	c: npm create vite@5.2.3
	c: cd react-app
	c: npm install
	c: npm run dev
4) me dirijo a 
	u: react-app\src\App.tsx
	s:
    //Esto es codigo JSX que sera transformado atravez de react. createElement( creando esto al Html en el server)
    // si voy a Babel.js en "Babel es un "compilador" (o transpilador) para JavaScript. "
		function App() {
      return <h1>Hola mundo</h1>;
    }
    export default App;
5) para pasarle variables:
  s:
    function App() {
      return <h1>Hola {variable va en llaves o "Curly brackets"}</h1>;
    }
    export default App;
6) llamando un componente:
  n: creo un componente:
  u: react-app\src\Titulo.tsx
  s: 
      function Titulo() {
        const nombre = 'kenneth';
        if (nombre) {
          return <h1>hola {nombre}</h1>;
        }
        return <h1>Hola mundo</h1>;
      }
      export default Titulo;
  6.1) lo importo en la aplicacion principal
    u: react-app\src\App.tsx
    s:
      import Titulo from './Titulo';
      function App() {
        return <Titulo />;   //--------Agregado Asi es como se utiliza
      }
      export default App;
7) instalacion de bootstrap:
  c: npm i bootstrap@5.3.3

  n: elimino toda la informacion de estilos:
  u: react-app\src\App.css
  U: react-app\src\index.css

  7.1) a√±adiendo bootstrap
    u:react-app\src\main.tsx
    s:
      import 'bootstrap/dist/css/bootstrap.min.css';


  7.2) estilos en linea, pero no se es tan buena practica asi:
   se pasan dentro de un {} ya que asi se evalua una variable dentro y 
   la variable es un objeto que entonces sera {elementos del objeto:dato}

    s: <div className="card" style={{ width: '440px' }}>

    7.2.2) forma2:
      s:  
      const width = { width: '440px' };
        return (
          <div className="card" style={width}>
8) creando componentes y reutilizando:
  u:react-app\src\components\Card.tsx
  s:
      function Card() {
        const width = { width: '440px' };
        return (
          <div className="card" style={width}>
            <div className="card-body">
              <CardBody />  //----------auqi se llama al componete 
            </div>
          </div>
        );
      }
      export function CardBody() { //se creo otro componete dentro del mismo archivo se puede asi o como quiera
        return (
          <>-------//tambien se podria usar fragement de reactesto sirve para no crear un div dentro de otro div ,
          //-------- esto simplemente hace que una lo que est adentro pero no va crear este componete ya que si se usa div si crearia el compnente div
            <h5 className="card-title">Card title</h5>
            <p className="card-text">
              Some quick example text to build on the card title and make up the bulk of the card's
              content.
            </p>
            <a href="#" className="btn btn-primary">
              Go somewhere
            </a>
          </>
        );
      }
      export default Card;

9) pasandole las propiedades a un componente:
  u: react-app\src\App.tsx
  s:
    import Card from './components/Card';
    function App() {
      return (
        <div>
           <Card body={'mensaje dese el App.tsx'} />;  //----aqui sepasa la info
        </div>
      );
    }
    export default App;
  

  9.1) me voy al componente qie le paso:
    u: react-app\src\components\Card.tsx
    s:
      function Card(props) {
        const { body } = props; // se sugiere usar destructuring
        const width = { width: '440px' };
        return (
          <div className="card" style={width}>
            <div className="card-body">{body}</div>  //----aqui se utiliza
          </div>
        );
    }

    n: ahor apara evitar errores de tipescript se debe colocar el typo
    s:
      // interface CardProps { //asegurarse que el nombre 
      // de la Interface tenga el Nombre del componente + Props
      // o simplemente Props
      interface Props {
        body: string;
      }

      function Card(props: Props) {
        const { body } = props; // se sugiere usar destructuring
        const width = { width: '440px' };
        return (
          <div className="card" style={width}>
            <div className="card-body">{body}</div>
          </div>
        );
      }

10) si quiero varias propiedades:
  u:react-app\src\components\Card.tsx
  n: el signo ? (question mark), en una interfaz hace que esta no sea obligatoria pasarsele 
  s:
    interface CardBodyProps {
      title: string;
      text?: string;
    }

    export function CardBody(props: CardBodyProps) {
      const { title, text } = props;
      return (
        <>
          <h5 className="card-title">{title}</h5>
          <p className="card-text">{text}</p>
        </>
      );
    }
  10.1) pasandole a CardBodyProps las propiedades:
    u:  react-app\src\App.tsx
    s:
      import CardBody from './components/Card';

      function App() {
        return (
          <div>
            <CardBody title={'titulo'} text="mi texto es " />;
          </div>
        );
      }
      export default App;

11) pasandole propiedad children a el componente hijo:
  u: react-app\src\App.tsx
  s: Card>mandndo propiedad desde children</Card>

  u: react-app\src\components\Card.tsx
  n: ojo la palabra "children" ya viene definida como propiedad propia de react 
  entonces no se puede usar esa palabra como un ombre de una propiedad
  s: interface Props {
      children: string; //nombre incambiable 
      body?: string;
    }

    function Card(props: Props) {
      const { body, children } = props; // se sugiere usar destructuring
      return (
          <div className="card-body">{children}</div>
      )
  11.1) pasandole Un componente a otro componente por medio del children

      U:react-app\src\App.tsx
      s:
      <Card>
        <CardBody title={'titulo'} text="mi texto es " />
      </Card>

      n: sin emabrgo me mandra este error: 
      This JSX tag's 'children' prop expects type 'string'
       which requires multiple children, but only a single 
       child was provided.

    11.1.2) entonces para evitar el error debo buscar una propiedad
    pra la interfaz:
      u: react-app\src\components\Card.tsx
      s:
        interface Props {
          children: React.ReactNode; //-----Agregadoforma1
          body?: string;
        }

        function Card(props: Props) {
          const { body, children } = props; // se sugiere usar destructuring
          return (
              <div className="card-body">{children}</div>
          );
        }

      s: forma2:
        import { ReactNode } from "react";  //
        interface Props {
          children: ReactNode;
          body?: string;
        }

12) creando un componente de lista:
  n: creo el componente lista
  U: react-app\src\components\List.tsx
  s:
      type Props = {
        data: string[]; //---esto sera un arreglo de string
      };

      function List({ data }: Props) {
        return (
          <div>
            <ul className="list-group">
              {data.map((item, index) => (
                <li key={index} className="list-group-item">
                  {item}
                </li>
              ))}
            </ul>
          </div>
        );
      }

      export default List;
  12.2) para el ejemplo solo le pasara la key el mismo elemento
      <ul className="list-group">
        {data.map((elemento) => (
          <li key={elemento} className="list-group-item">
            {elemento}
          </li>
        ))}
      </ul>

  12.3) ahora hago el llamado de ese comoponente
    u: react-app\src\App.tsx
    s: 
      function App() {
        const list = ['Goku', 'vegeta', ];
        return (
            <List data={list} />
        )
      }

    





      

node:
-Exportar formas
  1- export function CardBody(props: CardBodyProps) {
    importa: import v{ CardBody } from './components/Card';
  2-export default Card;
    importa: import Card from './components/Card';
  3; importando varias: import Card, { CardBody } from './components/Card';

-teclados:
  * CTRL+ d: si queiro seleccionar avarios textos iguales presiono CTRL+ d y va colocando un cursor al final de cada palabra
  * CTRL+ spacio: me muestra opciones
  * ctrl+alt+r : permite sacar las opciones de snippets (abreviatura pra crear codigo de react)

-snipepts:
  * tsrfce: creates a react copotnent

-interface: contiene el nombre y el tipo de las propiedades que se le pasan a una funcion o las variables para saber que tipo son
            las interfaces se pueden definir:
            forma1:   
              type Props = {};
            forma2:
              interface Props = {};   
-